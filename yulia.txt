
pthread for every philo

time usleep!!! philos need delay for right work, so they
don't grab things simultaneusly

algo: (deixtra?)

forks numbered
philos numbered

philo takes not left fork, but fork with SMALLER number:
p1 f1
p2 f2
p3 f3
p4 f4
p5 f1 (if 4 will take one, he will wait, because he tries to get this first ANYWAY)
DEADLOCK PREVENTION

take forks in order: min->max
leave forks in order: max->min
(locks problem)


----
for..

pthread_cread(  , ,philo_routine,data) 
//philo_routine: work of philosophers
//data: time, *forks[2]...

detach/pthread_join
join: only on the end of main program

---
in main thread:
while(1)
for philo in philosophers
 if (is_died(philo))
check if any philo is dead, simulation stops
clean all data, return
EXIT IS FORBIDDEN!!!!!! only for bonus part

only return in a main()

---
pthread_mutex_init ->
-> mutex_destroy not needed in our case?
possible after all join's are done

---
ptherads existing in one process, 
so they share same information,
it's easier to share information

"cheating" is possible
philos can communicate somehow
---

void *philo(void * data)
{
	while (1)
	{
		lock(min_f)
		printf(philo took fork)
		left(max_f)
		printf(philo took fork)
		printf(philo eating)
		usleep (time to eat * 1000)
		unlock
		unlock
		printf(sleeping)
		usleep( time_to_sleep)
		printf(thinking)
	}
}

thinking - mutex locked, 
not possible to lock one more 
thinking 
---
usleep  - need * 1000
while init - * 1000 while saving data into structure

---
stdio should be protected
printf will be mixed,
every thread will try to printf in the sama time (also data race?)

printf

1 global mutex to protext stdio which we are using before/after printing

---
void *philo(void * data)
{
//numerate philo first in *data!!
	if (data->philo_id % 2 == 0
		usleep(2500))
// ~half of philos will come later to the table

	while (1)
	{

		lock(min_f)
		printf(philo took fork)
		left(max_f)
		printf(philo took fork)
		printf(philo eating)
		usleep (time to eat * 1000)
		unlock
		unlock
		printf(sleeping)
		usleep( time_to_sleep)
		printf(thinking)
	}
}

cannot add is_died check into "void philo" function

---

is_died(philo)

struct philo
{
time_to_die
time_to_sleep
time_to_eat
mutex *left (or min idx)
mutex *right (or max idx)
struct timeval last_eating_time
}

---
struct timeval last_eating_time


int gettimeofday(struck timeval *)

struct timeval
{
	long tv_sec //global time from 1970
	long tv_usec //time inbetween (0, 1000000)
}

tv_sec * 1000 + tv_usec /1000 - CURRENT TIME

get current time 
extract time of lastmeal
if > time to die 
is_died returns (1)
simulation stops


void *philo(void * data)
{
//numerate philo first in *data!!
	if (data->philo_id % 2 == 0
		usleep(2500))
// ~half of philos will come later to the table

	while (1)
	{

		lock(min_f)
		printf(philo took fork)
		left(max_f)
		printf(philo took fork)
		printf(philo eating)
		time of last meal
		usleep (time to eat * 1000)
		unlock
		unlock
		printf(sleeping)
		usleep( time_to_sleep)
		printf(thinking)
	}
}


---
add must_die to philo_struct,
protect must_die with mutex

void philo  -  while (1)
checks first is must_die = 1, then thread stops before starting

---

after must_die = 1
thread_join
free everything
main stops as last one

---
---
usleep works not 100% correct

